<!DOCTYPE html>
<html>
  <head>
    <style>
      .box.box-flat{        
        height: 100vh;
      }
    </style>
    <title>100 Jaar HTS</title>    
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes" />
    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/base.css">
    <link rel="stylesheet" href="/styles/pof.css">

    <style type="text/css">
    body {
      margin: 0px;
      padding: 0px;
      line-height: 1.3;
      font-family: Avenir;
      min-width:320px;
      font-size:11pt;
      box-sizing: border-box;
    }

    p {
      margin-top:5px;
      margin-bottom: 15px;
    }

    b {
      font-weight: bold;
    }

    h1 {
      margin-top:50px;
      margin-bottom:10px;
      font-weight: "heavy";
      font-size:17pt;
      color:#999999;
    }

    .wrapper{
      width:75%;
      height:auto;
      margin-top:50px;
      margin:50px auto 0;
      background-color: #F1F1F1;
    }

    .content-header{
      padding-top:20px;
      height:100px;
      width:100%;
      background-color: #00488f;
    }

    .content-header:after{
      clear:both;
    }
    .hts-logo{
      padding-left:40px;
      float:left;
    }

    .hts-logo img{
      width:100px;
    }
    
    .nhl-logo{
      padding-right:40px;
      float:right;
    }

    .nhl-logo img{
      width:100px;
    }

    .content {
      width:90%;
      margin: 0 auto;
      padding-bottom: 50px;
    }

    .footer {
      padding-top:10px;
      padding-left:20px;
      font-size: 9px;
      background-color: white;
    }

    .btn {
      font-size: 11pt;
      font-weight: bold;
      padding: 7px 15px;
      border: 0px;
      background-color: #00488f;
      border-radius: 7px;
      color: #fff;
      text-decoration: none;
      cursor: pointer;
      }
    
  </style>
  </head>

  <body>    



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/jquery.js"></script>
    

    <%- body %>
  </body>
</html>
